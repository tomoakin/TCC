
R version 3.0.0 (2013-04-03) -- "Masked Marvel"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(TCC)
Loading required package: edgeR
Loading required package: limma
Loading required package: baySeq

Attaching package: 'baySeq'

The following object is masked from 'package:base':

    rbind

Loading required package: DESeq
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: 'BiocGenerics'

The following objects are masked from 'package:parallel':

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from 'package:baySeq':

    rbind

The following object is masked from 'package:stats':

    xtabs

The following objects are masked from 'package:base':

    Filter, Find, Map, Position, Reduce, anyDuplicated, as.data.frame,
    cbind, colnames, duplicated, eval, get, intersect, lapply, mapply,
    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, rank,
    rbind, rep.int, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unlist

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: locfit
locfit 1.5-9 	 2013-03-22
Loading required package: lattice

Attaching package: 'DESeq'

The following object is masked from 'package:limma':

    plotMA

Loading required package: ROC

Attaching package: 'TCC'

The following object is masked from 'package:edgeR':

    calcNormFactors

> data(hypoData)
> 
> df<-data.frame(row.names = paste('a', rownames(hypoData), sep=""),
+   A1 = hypoData[,1], A2 = hypoData[,2], A3 = hypoData[,3],
+   B1 = hypoData[,4], B2 = hypoData[,5], B3 = hypoData[,6])
> head(df)
          A1  A2  A3  B1  B2  B3
agene_1   34  45 122  16  14  29
agene_2  358 388  22  36  25  68
agene_3 1144 919 990 374 480 239
agene_4    0   0  44  18   0   0
agene_5   98  48  17   1   8   5
agene_6  296 282 216  86  62  69
> tccdata=new("TCC",df,c(1, 1, 1, 2, 2, 2))
> head(tccdata$gene_id)
[1] "agene_1" "agene_2" "agene_3" "agene_4" "agene_5" "agene_6"
> 
> df<-data.frame(row.names = paste('a', rownames(hypoData), sep=""),
+   A1 = hypoData[,1], A2 = hypoData[,2], A3 = hypoData[,3],
+   B1 = hypoData[,4], B2 = hypoData[,5], B3 = hypoData[,6])
> m<-cbind(df[[1]], df[[2]], df[[3]],df[[4]],df[[5]],df[[6]])
> head(m)
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]   34   45  122   16   14   29
[2,]  358  388   22   36   25   68
[3,] 1144  919  990  374  480  239
[4,]    0    0   44   18    0    0
[5,]   98   48   17    1    8    5
[6,]  296  282  216   86   62   69
> tccdata=new("TCC", m, c(1, 1, 1, 2, 2, 2))
> head(tccdata$gene_id)
[1] "gene_1" "gene_2" "gene_3" "gene_4" "gene_5" "gene_6"
> 
> group <- c(1, 1, 1, 2, 2, 2)
> tcc <- new("TCC", hypoData, group)
> cat("tcc$count: ")
tcc$count: > cat(dim(tcc$count))
1000 6> cat("\n")

> tccf <- filterLowCountGenes(tcc)
> cat("dim(tcc$count): ")
dim(tcc$count): > cat(dim(tccf$count))
996 6> cat("\n")

> cat("dim(hypoData): ")
dim(hypoData): > cat(dim(hypoData))
1000 6> cat("\n")

> cat("dim(hypoData[as.logical(rowSums(hypoData)>0),]): ")
dim(hypoData[as.logical(rowSums(hypoData)>0),]): > cat(dim(hypoData[as.logical(rowSums(hypoData) > 0),]))
996 6> cat("\n")

> 
> tcc <- simulateReadCounts(Ngene = 100, PDEG = 0.2, DEG.assign = c(0.9, 0.1))
TCC::INFO: Generating simulation data under NB distribution ...
TCC::INFO: (genesizes   :  100 )
TCC::INFO: (group  :  1, 1, 1, 2, 2, 2 )
TCC::INFO: (foldhcange distribution :  uniform )
TCC::INFO: (PDEG        :  0.18, 0.02 )
> #  group <- c(3, 3)
> #  tcc <- new("TCC", hypoData, c(3,3))
> show(tcc)
Count:
       G1_rep1 G1_rep2 G1_rep3 G2_rep1 G2_rep2 G2_rep3
gene_1       2       3       0       1       8       0
gene_2     665     453     492     102     120      77
gene_3       1       0       2       9       0       0
gene_4      32      11       7       5      11       2
gene_5     120     116     148      42      33      38
gene_6     215     184     212      38      49      68

Sample:
        group norm.factors lib.sizes
G1_rep1     1            1      8767
G1_rep2     1            1      8172
G1_rep3     1            1      8245
G2_rep1     2            1      6829
G2_rep2     2            1      6613
G2_rep3     2            1      6493

> sub_tcc <- subset(tcc,1:10*10)
> show(sub_tcc)
Count:
        G1_rep1 G1_rep2 G1_rep3 G2_rep1 G2_rep2 G2_rep3
gene_10      36      12      15       4       2       1
gene_20      18      16      12     311     661      91
gene_30       7       8       1       4      11       6
gene_40      10       0      11      26      19       3
gene_50     260     141     158     295      67     258
gene_60      20       0      16       0       0       7

Sample:
        group norm.factors lib.sizes
G1_rep1     1            1       445
G1_rep2     1            1       269
G1_rep3     1            1       298
G2_rep1     2            1       746
G2_rep2     2            1       901
G2_rep3     2            1       475

> sub2_tcc <- tcc[1:10*10-1]
> show(sub2_tcc)
Count:
        G1_rep1 G1_rep2 G1_rep3 G2_rep1 G2_rep2 G2_rep3
gene_9      232     170     189      52      47      55
gene_19       0       2       0       1       1      14
gene_29     944    1101     619     950    1070    1065
gene_39     149     150     121     130     235     114
gene_49      14       9       6      11       2      12
gene_59     250     277     234     225     201     189

Sample:
        group norm.factors lib.sizes
G1_rep1     1            1      1700
G1_rep2     1            1      1824
G1_rep3     1            1      1282
G2_rep1     2            1      1466
G2_rep2     2            1      1628
G2_rep3     2            1      1547

> tcc$calcNormFactors(norm.method = "tmm", test.method = "bayseq")
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : tmm - [ bayseq - tmm ] X 1 )
TCC::INFO: First normalization done.
TCC::INFO: Done.
> tcc$estimateDE(test.method = "edger", FDR = 0.1)
TCC::INFO: Identifying DE genes using edger ...
Calculating library sizes from column totals.
TCC::INFO: Done.
> 
> sub_tcc <- subset(tcc,1:10*10)
  [1] 0 1 0 0 1 1 0 0 1 1 0 1 0 0 1 1 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0
 [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
> show(sub_tcc)
Count:
        G1_rep1 G1_rep2 G1_rep3 G2_rep1 G2_rep2 G2_rep3
gene_10      36      12      15       4       2       1
gene_20      18      16      12     311     661      91
gene_30       7       8       1       4      11       6
gene_40      10       0      11      26      19       3
gene_50     260     141     158     295      67     258
gene_60      20       0      16       0       0       7

Sample:
        group norm.factors lib.sizes
G1_rep1     1    0.8802946  391.7311
G1_rep2     1    0.9169333  246.6551
G1_rep3     1    0.9584188  285.6088
G2_rep1     2    1.1587498  864.4274
G2_rep2     2    0.9796862  882.6973
G2_rep3     2    1.1059173  525.3107

DEGES:
   Pipeline       : 
   Execution time :  sec
   Threshold type :  < 
   Potential PDEG : 

[1] 1.439901
Results:
  gene_id  a.value    m.value      p.value      q.value rank estimatedDEG
1 gene_10 2.871513 -4.4560090 3.676660e-03 3.342418e-02   11            1
2 gene_20 6.296449  3.0681938 4.053046e-10 4.053046e-08    1            1
3 gene_30 2.798088 -0.9162145 7.326357e-01 9.664782e-01   73            0
4 gene_40 3.427411 -0.1601406 2.999998e-01 9.636273e-01   30            0
5 gene_50 7.822352 -0.9775558 7.079689e-01 9.664782e-01   64            0
6 gene_60 2.745839 -3.0063809 2.379991e-01 8.715036e-01   27            0

> 
> show(tcc[c("gene_13", "gene_17", "gene_23")])
  [1] 0 1 0 0 1 1 0 0 1 1 0 1 0 0 1 1 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0
 [38] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 [75] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
Count:
        G1_rep1 G1_rep2 G1_rep3 G2_rep1 G2_rep2 G2_rep3
gene_13       5       6       2       0       1       2
gene_17     576     811     743     174     201     124
gene_23     395     392     495     592     460     386

Sample:
        group norm.factors lib.sizes
G1_rep1     1    0.8802946  859.1675
G1_rep2     1    0.9169333 1108.5724
G1_rep3     1    0.9584188 1188.4393
G2_rep1     2    1.1587498  887.6024
G2_rep2     2    0.9796862  648.5523
G2_rep3     2    1.1059173  566.2296

DEGES:
   Pipeline       : 
   Execution time :  sec
   Threshold type :  < 
   Potential PDEG : 

[1] 3.77297
Results:
  gene_id  a.value    m.value      p.value      q.value rank estimatedDEG
1 gene_13 1.241789 -1.3478246 2.071739e-01 0.8490029975   24            0
2 gene_17 8.468238 -1.4835247 2.225325e-05 0.0005563313    4            1
3 gene_23 8.860380  0.7426972 4.168073e-01 0.9664782452   39            0

> result <- getResult(sub_tcc, sort = TRUE)
[1] 1.439901
> print(head(result))
    gene_id    a.value    m.value      p.value      q.value rank estimatedDEG
2   gene_20  6.2964488  3.0681938 4.053046e-10 4.053046e-08    1            1
1   gene_10  2.8715131 -4.4560090 3.676660e-03 3.342418e-02   11            1
10 gene_100  5.9230628 -0.5551795 9.996736e-02 6.077284e-01   16            0
6   gene_60  2.7458391 -3.0063809 2.379991e-01 8.715036e-01   27            0
4   gene_40  3.4274114 -0.1601406 2.999998e-01 9.636273e-01   30            0
9   gene_90 -0.4152608  0.1175388 6.225220e-01 9.664782e-01   56            0
> 
> tcc <- simulateReadCounts(Ngene = 100, PDEG = 0.2, DEG.assign = c(0.9, 0.1))
TCC::INFO: Generating simulation data under NB distribution ...
TCC::INFO: (genesizes   :  100 )
TCC::INFO: (group  :  1, 1, 1, 2, 2, 2 )
TCC::INFO: (foldhcange distribution :  uniform )
TCC::INFO: (PDEG        :  0.18, 0.02 )
> tcc <- calcNormFactors(tcc)
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : tmm - [ edger - tmm ] X 1 )
TCC::INFO: First normalization done.
Calculating library sizes from column totals.
TCC::INFO: Done.
> tcc <- estimateDE(tcc, test.method = "bayseq", FDR = 0.1, samplesize = 100)
TCC::INFO: Identifying DE genes using bayseq ...
TCC::INFO: Done.
> result <- getResult(tcc, sort = TRUE)
[1] 0.3567222
> print(head(result))
   gene_id  a.value   m.value      p.value      q.value rank estimatedDEG
10 gene_10 7.294534 -3.061864 7.699557e-05 7.699557e-05    1            1
6   gene_6 4.342652 -2.727006 1.670628e-02 8.391637e-03    2            1
1   gene_1 5.539692 -2.374812 1.961574e-02 1.213301e-02    3            1
7   gene_7 3.926304 -3.606390 5.942730e-02 2.395658e-02    4            1
5   gene_5 8.092454 -2.033375 6.796439e-02 3.275814e-02    5            1
85 gene_85 3.980096  5.227524 1.368052e-01 5.009932e-02    6            1
> table(tcc$estimatedDEG) 

 0  1 
93  7 
> png("plot4b.png", 600, 500)
> plot(tcc)
[1] 0.3567222
> dev.off()
null device 
          1 
> 
> tcc <- simulateReadCounts(Ngene = 100, PDEG = 0.2, DEG.assign = c(0.9, 0.1))
TCC::INFO: Generating simulation data under NB distribution ...
TCC::INFO: (genesizes   :  100 )
TCC::INFO: (group  :  1, 1, 1, 2, 2, 2 )
TCC::INFO: (foldhcange distribution :  uniform )
TCC::INFO: (PDEG        :  0.18, 0.02 )
> tcc <- calcNormFactors(tcc)
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : tmm - [ edger - tmm ] X 1 )
TCC::INFO: First normalization done.
Calculating library sizes from column totals.
TCC::INFO: Done.
> tcc <- estimateDE(tcc, test.method = "edger", FDR = 0.1)
TCC::INFO: Identifying DE genes using edger ...
Calculating library sizes from column totals.
TCC::INFO: Done.
> result <- getResult(tcc, sort = TRUE)
[1] 0.3607615
> print(head(result))
   gene_id  a.value   m.value      p.value      q.value rank estimatedDEG
20 gene_20 5.954710  2.507263 1.334354e-08 1.334354e-06    1            1
4   gene_4 6.322689 -2.483281 8.412091e-08 4.206045e-06    2            1
9   gene_9 5.897170 -2.669554 3.479720e-07 1.159907e-05    3            1
13 gene_13 5.662524 -2.010877 1.569347e-05 3.923367e-04    4            1
8   gene_8 7.795372 -1.798777 3.643931e-05 7.123074e-04    5            1
6   gene_6 5.708091 -1.963821 4.273844e-05 7.123074e-04    6            1
> table(tcc$estimatedDEG) 

 0  1 
85 15 
> png("plot4.png", 600, 500)
> plot(tcc)
[1] 0.3607615
> dev.off()
null device 
          1 
> 
> data(hypoData_mg)
> group <- c(1, 1, 1, 2, 2, 2, 3, 3, 3)
> tcc <- new("TCC", hypoData_mg, group)
> design <- model.matrix(~ as.factor(group))
> coef <- 2:length(unique(group))
> tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger",
+                         iteration = 1, design = design, coef = coef)
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : tmm - [ edger - tmm ] X 1 )
TCC::INFO: First normalization done.
TCC::INFO: Done.
> tcc$norm.factors
  G1_rep1   G1_rep2   G1_rep3   G2_rep1   G2_rep2   G2_rep3   G3_rep1   G3_rep2 
1.0285193 0.9001479 0.7877150 0.8308582 1.1867099 1.1835535 0.9994667 1.0281489 
  G3_rep3 
1.0548806 
> 
> tcc <- simulateReadCounts(Ngene = 100, PDEG = 0.2, DEG.assign = c(0.9, 0.1),replicate=c(1,1))
TCC::INFO: Generating simulation data under NB distribution ...
TCC::INFO: (genesizes   :  100 )
TCC::INFO: (group  :  1, 2 )
TCC::INFO: (foldhcange distribution :  uniform )
TCC::INFO: (PDEG        :  0.18, 0.02 )
> tcc <- calcNormFactors(tcc, norm.method = "deseq", test.method = "deseq",
+                           FDR = 0.1, floorPDEG = 0.05)
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : deseq - [ deseq - deseq ] X 1 )
TCC::INFO: First normalization done.
TCC::INFO: Done.
> cat("tcc$norm.factors: ")
tcc$norm.factors: > cat(tcc$norm.factors)
1.121314 0.8786861> cat("\n")

> cat("tcc$stat$execution.time: ")
tcc$stat$execution.time: > cat(tcc$stat$execution.time)
> cat("\n")

> 
> tcc2 <- simulateReadCounts(Ngene = 100, PDEG = 0.2, DEG.assign = c(0.9, 0.1))
TCC::INFO: Generating simulation data under NB distribution ...
TCC::INFO: (genesizes   :  100 )
TCC::INFO: (group  :  1, 1, 1, 2, 2, 2 )
TCC::INFO: (foldhcange distribution :  uniform )
TCC::INFO: (PDEG        :  0.18, 0.02 )
> tcc <- calcNormFactors(tcc2, norm.method = "deseq", test.method = "deseq",
+                         FDR = 0.1, floorPDEG = 0.05)
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : deseq - [ deseq - deseq ] X 1 )
TCC::INFO: First normalization done.
TCC::INFO: Done.
> cat("tcc$norm.factors: ")
tcc$norm.factors: > cat(tcc$norm.factors)
0.6957668 0.6845971 0.660554 1.345843 1.363689 1.24955> cat("\n")

> cat("tcc$stat$execution.time: ")
tcc$stat$execution.time: > cat(tcc$stat$execution.time)
> cat("\n")

> 
> tcc <- calcNormFactors(tcc2, iteration = 3)
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : tmm - [ edger - tmm ] X 3 )
TCC::INFO: First normalization done.
Calculating library sizes from column totals.
Calculating library sizes from column totals.
Calculating library sizes from column totals.
TCC::INFO: Done.
> cat("tcc$norm.factors: ")
tcc$norm.factors: > cat(tcc$norm.factors)
0.590021 0.6374263 0.6703091 1.346994 1.410647 1.344602> cat("\n")

> cat("tcc$stat$execution.time: ")
tcc$stat$execution.time: > cat(tcc$stat$execution.time)
> cat("\n")

> 
> tcc <- calcNormFactors(tcc2, norm.method = "tmm", test.method = "edger")
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : tmm - [ edger - tmm ] X 1 )
TCC::INFO: First normalization done.
Calculating library sizes from column totals.
TCC::INFO: Done.
> cat("tcc$norm.factors: ")
tcc$norm.factors: > cat(tcc$norm.factors)
0.590021 0.6374263 0.6703091 1.346994 1.410647 1.344602> cat("\n")

> cat("tcc$stat$execution.time: ")
tcc$stat$execution.time: > cat(tcc$stat$execution.time)
> cat("\n")

> 
> tcc <- calcNormFactors(tcc2, norm.method = "tmm", test.method = "bayseq")
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : tmm - [ bayseq - tmm ] X 1 )
TCC::INFO: First normalization done.
TCC::INFO: Done.
> cat("tcc$norm.factors: ")
tcc$norm.factors: > cat(tcc$norm.factors)
0.6593808 0.7413749 0.6348948 1.305597 1.355168 1.303585> cat("\n")

> cat("tcc$stat$execution.time: ")
tcc$stat$execution.time: > cat(tcc$stat$execution.time)
> cat("\n")

> 
> group <- c(1, 1, 1, 2, 2, 2, 3, 3, 3)
> tcc <- new("TCC", hypoData_mg, group)
> ###  Normalization  ###
> design <- model.matrix(~ as.factor(group))
> coef <- 2:length(unique(group))
> tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger",
+                         iteration = 1, design = design, coef = coef)
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : tmm - [ edger - tmm ] X 1 )
TCC::INFO: First normalization done.
TCC::INFO: Done.
> ###  DE analysis  ###
> fit1 <- count ~ condition
> fit0 <- count ~ 1
> tcc <- estimateDE(tcc, test.method = "deseq",
+                   FDR = 0.1, fit0 = fit0, fit1 = fit1)
TCC::INFO: Identifying DE genes using deseq ...
TCC::INFO: Done.
> result <- getResult(tcc, sort = TRUE)
> head(result)
     gene_id a.value m.value      p.value      q.value rank estimatedDEG
126 gene_126      NA      NA 2.182698e-13 2.182698e-10    1            1
63   gene_63      NA      NA 1.244090e-10 6.220452e-08    2            1
27   gene_27      NA      NA 2.134407e-08 7.114689e-06    3            1
176 gene_176      NA      NA 4.139815e-08 1.034954e-05    4            1
83   gene_83      NA      NA 5.531305e-08 1.106261e-05    5            1
121 gene_121      NA      NA 6.736260e-08 1.122710e-05    6            1
> table(tcc$estimatedDEG)

  0   1 
870 130 
> 
> group <- c(1, 1, 1, 2, 2, 2, 3, 3, 3)
> tcc <- new("TCC", hypoData_mg, group)
> ###  Normalization  ###
> design <- model.matrix(~ as.factor(group))
> coef <- 2:length(unique(group))
> tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger",
+                         iteration = 1, design = design, coef = coef)
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : tmm - [ edger - tmm ] X 1 )
TCC::INFO: First normalization done.
TCC::INFO: Done.
> ###  DE analysis  ###
> fit1 <- count ~ condition
> fit0 <- count ~ 1
> cds <- newCountDataSet(tcc$count, group)
> sizeFactors(cds) <- tcc$norm.factors * colSums(tcc$count)
> cds <- estimateDispersions(cds)
> reduced.model <- fitNbinomGLMs(cds, fit0)
.
> full.model <- fitNbinomGLMs(cds, fit1)
.
> p.value <- nbinomGLMTest(full.model, reduced.model)
> p.value[is.na(p.value)] <- 1
> q.value <- p.adjust(p.value, method = "BH")
> tmp <- cbind(p.value, q.value)
> rownames(tmp) <- tcc$gene_id
> result <- tmp[order(p.value), ]
> head(result)
              p.value      q.value
gene_126 2.182698e-13 2.182698e-10
gene_63  1.244090e-10 6.220452e-08
gene_27  2.134407e-08 7.114689e-06
gene_176 4.139815e-08 1.034954e-05
gene_83  5.531305e-08 1.106261e-05
gene_121 6.736260e-08 1.122710e-05
> sum(q.value < 0.1)
[1] 130
> sum(q.value < 0.2)
[1] 143
> 
> group <- c(1, 1, 1, 2, 2, 2, 3, 3, 3)
> tcc <- new("TCC", hypoData_mg, group)
> ###  Normalization  ###
> design <- model.matrix(~ as.factor(group))
> coef <- 2:length(unique(group))
> tcc <- calcNormFactors(tcc, norm.method = "tmm", test.method = "edger",
+                         iteration = 1, design = design, coef = coef)
TCC::INFO: Calculating normalization factors using DEGES
TCC::INFO: (iDEGES pipeline : tmm - [ edger - tmm ] X 1 )
TCC::INFO: First normalization done.
TCC::INFO: Done.
> ###  DE analysis  ###
> tcc <- estimateDE(tcc, test.method = "edger",
+                   FDR = 0.1, design = design, coef = coef)
TCC::INFO: Identifying DE genes using edger ...
TCC::INFO: Done.
> result <- getResult(tcc, sort = TRUE)
> head(result)
     gene_id a.value m.value      p.value      q.value rank estimatedDEG
176 gene_176      NA      NA 2.207155e-13 2.207155e-10    1            1
27   gene_27      NA      NA 4.924858e-12 2.004363e-09    2            1
126 gene_126      NA      NA 6.013088e-12 2.004363e-09    3            1
56   gene_56      NA      NA 8.316457e-12 2.079114e-09    4            1
64   gene_64      NA      NA 2.596476e-11 4.369393e-09    5            1
121 gene_121      NA      NA 2.621636e-11 4.369393e-09    6            1
> table(tcc$estimatedDEG)

  0   1 
828 172 
> 
> 
> proc.time()
   user  system elapsed 
 61.589   0.145  62.018 
